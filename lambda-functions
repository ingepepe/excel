// Put all values of a two-dimensional range into a single column
ARRAYITEMS = LAMBDA(range, [unique_values],
    LET(values_string, TEXTJOIN(",",TRUE,range),
        values_array, FILTERXML("<x><y>"&SUBSTITUTE(values_string,",","</y><y>")&"</y></x>","//y"),
        IF(unique_values, UNIQUE(values_array), values_array)
    )
);

// mode = 1 : append to the right
APPENDARRAYS = LAMBDA(range1, range2, [mode],
    LET(
        row_index, IF(
            mode = 1,
            SEQUENCE(MAX(ROWS(range1),ROWS(range2)),1),
            SEQUENCE(ROWS(range1)+ROWS(range2),1)
        ),
        col_index, IF(
            mode = 1,
            SEQUENCE(1,COLUMNS(range1)+COLUMNS(range2)),
            SEQUENCE(1,MAX(COLUMNS(range1),COLUMNS(range2)))
        ),
        append, IF(
            mode = 1,
            IF(
                col_index <= COLUMNS(range1),
                INDEX(range1, row_index, col_index),
                INDEX(range2, row_index, col_index - COLUMNS(range1))
            ),
            IF(
                row_index <= ROWS(range1),
                INDEX(range1, row_index, col_index),
                INDEX(range2, row_index - ROWS(range1), col_index)
            )
        ),
        IFERROR(append,"")
    )
);

// Take to ranges and compare side by side (N rows x 2 columns) what values are shared by each or held by only one of them. 
COMPAREARRAYVALUES = LAMBDA(left_side_array, right_side_array, [left_side_header], [right_side_header],
    LET(
        unique_left, ARRAYITEMS(left_side_array, 1),
        unique_right, ARRAYITEMS(right_side_array, 1),
        unique_both, UNIQUE(SORT(APPENDARRAYS(left_side_array, right_side_array))),
        compared_left, IFERROR(XLOOKUP(unique_both, unique_left, unique_left),""),
        compared_right, IFERROR(XLOOKUP(unique_both, unique_right, unique_right),""),
        side_by_side, APPENDARRAYS(compared_left, compared_right,1),
        side_by_side
    )
);

IFBLANK = LAMBDA(value, value_if_blank, IF(ISBLANK(value), value_if_blank, value));

example = IFBLANK(, "Blank");

// if a delimiter is provided, the returned array will be a split of strings that ignores the segment length
// if a segment length is specified, the array returned will be composed of items of that number of characters
// For example, STRINGTOARRAY("abcdefghij",,4) will produce "abcd","efgh","ij"
STRINGTOARRAY = LAMBDA(string_to_array, [delimiter], [segment_length],
    LET(
        chars_array,
        IF( ISOMITTED(segment_length),
            MID(string_to_array,SEQUENCE(LEN(string_to_array)),1),
            IF( ISNUMBER(segment_length),
                MID(string_to_array,SEQUENCE(ROUNDUP(LEN(string_to_array)/segment_length,0))*segment_length,segment_length),
                "Invalid segment length"
            )
        ),
        split_array,
        IF( OR(ISNUMBER(SEARCH("s1>",delimiter)),ISNUMBER(SEARCH("t2>",delimiter))),
            "Invalid delimiter",
            FILTERXML( "<t2><s1>" & SUBSTITUTE(string_to_array,delimiter,"</s1><s1>") & "</s1></t2>","//s1")
        ),
        returned_array, IF(ISOMITTED(delimiter), chars_array, split_array),
        returned_array
    )
);

// sort: 1 for ascending, -1 for descending, blank for no sort
UNIQUECHARS = LAMBDA(strings_of_different_characters, [sort],
    LET(
        base, TEXTJOIN("", TRUE, strings_of_different_characters),
        chars, STRINGTOARRAY(base),
        unique_chars, UNIQUE(chars),
        sorted_chars, SWITCH(sort,
            1, SORT(unique_chars,1,1),
            -1, SORT(unique_chars,1,-1),
            unique_chars),
        joined_chars, TEXTJOIN("", TRUE, sorted_chars),
        joined_chars
    )
);

// mode default/blank/0: all, 1: numbers only  2: letters only, 3: upper-case only, 4: lower-case only
EXTRACTCHARS = LAMBDA(string_to_extract_from, [mode], [additional_chars],
    LET(
        numbers, "0123456789",
        uppers, "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        lowers, "abcdefghijklmnopqrstuvwxyz",
        others, IF(ISOMITTED(additional_chars),"", UNIQUECHARS(additional_chars,1)),
        valid_chars, SWITCH(mode,
            1, CONCAT(numbers,others),
            2, CONCAT(uppers,lowers,others),
            3, CONCAT(uppers,others),
            4, CONCAT(lowers,others),
            CONCAT(numbers,uppers,lowers,others)),
        chars_to_validate, STRINGTOARRAY(string_to_extract_from),
        valid_extract, TEXTJOIN("", TRUE, (IFERROR(MID(valid_chars,FIND(chars_to_validate, valid_chars),1),""))),
        valid_extract
    )
);

// Returns a binary string where 1s indicate a match and 0s indicate no match. It's case-sensitive.
// For example, VALIDATECHARS("ABCabc123", "3Ab") returns "100010001"
VALIDATECHARS = LAMBDA(base_string, valid_chars,
    LET(
        valids, UNIQUECHARS(valid_chars),
        base_array, STRINGTOARRAY(base_string),
        match_chars, IFERROR(FIND(base_array,valids),0),
        binary_array, IFERROR(match_chars/match_chars,0),
        binary_string, TEXTJOIN("", FALSE, binary_array),
        binary_string
    )
);

//Converts a 15-char case-sensitive Salesforce ID into an 18-char case-resilient ID
SALESFORCESAFEID = LAMBDA(sfId,
    LET(
        uppers, "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        sf_chars, "ABCDEFGHIJKLMNOPQRSTUVWXYZ012345",
        next_segment, SWITCH(LEN(sfId),
            15, MID(sfId, 1, 5),
            16, MID(sfId, 6, 5),
            17, MID(sfId, 11, 5),
            ""),
        IF(LEN(next_segment)=5,
            LET(
                uppers_in_segment, VALIDATECHARS(next_segment,uppers),
                next_position_binary, TEXTJOIN("", true, MID(uppers_in_segment, {5,4,3,2,1}, 1)),
                next_position, BIN2DEC(next_position_binary),
                next_char, mid(sf_chars, next_position + 1, 1),
                sfid_plus_char, CONCAT(sfId, next_char),
                SALESFORCESAFEID(sfid_plus_char)
            ),
            sfId
        )
    )
);

